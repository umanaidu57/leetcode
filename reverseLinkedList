/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {

        // Empty list
        if (head == null) {
            return null;
        }
        // Move the two pointers until they reach the start point
        
        ListNode current = head, prev = null;
        while (m > 1) {
            prev = current;
            current = current.next;
            m--;
            n--;
        }

        // The two pointers that will fix the final connections.
        ListNode connection = prev, tail = current;

        // Iteratively reverse the nodes until n becomes 0.
        ListNode third = null;
        while (n > 0) {
            third = current.next;
            current.next = prev;
            prev = current;
            current = third;
            n--;
        }
        if (connection != null) {
            connection.next = prev;
        } else {
            head = prev;
        }

        tail.next = current;
        return head;
    }
}
